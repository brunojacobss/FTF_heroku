{"version":3,"sources":["constants.ts","services/commits.ts","utils/emoji-parser.ts","components/commit.tsx","components/commit-list.tsx","hooks/use-request.tsx","App.tsx","index.tsx"],"names":["repoUrl","commitService","getCommits","url","a","commits","request","response","data","commitData","author","commit","html_url","push","emojiMap","white_check_mark","tada","lipstick","package","page_facing_up","sparkles","regExpression","parseEmoji","text","result","exec","replace","error","console","Commit","index","Card","data-testid","style","cursor","Accordion","Toggle","as","Header","eventKey","toString","Image","src","avatar_url","alt","roundedCircle","height","width","marginRight","message","Collapse","Body","committer","date","href","login","email","CommitList","method","onSuccess","body","useState","setError","loading","setLoading","setCommits","doRequest","concat","useRequest","log","fetchCommits","useCallback","useEffect","commitList","map","Alert","variant","Button","onClick","disabled","marginBottom","count","App","Container","Jumbotron","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6eb785eb.chunk.js","sourcesContent":["const repoOwner = 'brunojacobss';\r\nconst repoName = 'FTF-CommitHistory';\r\nexport const repoUrl = `/repos/${repoOwner}/${repoName}/commits`;\r\n","import { request } from '@octokit/request';\r\nimport { CommitData } from '../models/commitData';\r\n\r\nconst getCommits = async (url: string) => {\r\n  try {\r\n  } catch (error) {}\r\n  let commits: CommitData[] = [];\r\n  const response = await request(`GET ${url}`);\r\n  for (const commitData of response.data) {\r\n    const { author, commit, html_url } = commitData;\r\n    commits.push({ author, commit, html_url });\r\n  }\r\n  return commits;\r\n};\r\n\r\nconst commitService = { getCommits };\r\n\r\nexport default commitService;\r\n","const emojiMap = {\r\n  white_check_mark: 'âœ…',\r\n  tada: 'ðŸŽ‰',\r\n  lipstick: 'ðŸ’„',\r\n  package: 'ðŸ“¦',\r\n  page_facing_up: 'ðŸ“„',\r\n  sparkles: 'âœ¨',\r\n};\r\nconst regExpression = /:([^:]*):/g;\r\nexport const parseEmoji = (text: string) => {\r\n  try {\r\n    let result;\r\n    while ((result = regExpression.exec(text))) {\r\n      // @ts-ignore\r\n      text = text.replace(result[0], emojiMap[result[1]]);\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n\r\n  return text;\r\n};\r\n","import { CommitData } from '../models/commitData';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { parseEmoji } from '../utils/emoji-parser';\r\n\r\ninterface Props {\r\n  commitData: CommitData;\r\n  index: number;\r\n}\r\n\r\nexport const Commit: React.FC<Props> = ({ commitData, index }) => {\r\n  const { commit, author, html_url } = commitData;\r\n  return (\r\n    <Card data-testid=\"commitDiv\" style={{ cursor: 'pointer' }}>\r\n      <Accordion.Toggle as={Card.Header} eventKey={index.toString()}>\r\n        <Image\r\n          src={author.avatar_url}\r\n          alt=\"avatar of the author\"\r\n          roundedCircle\r\n          style={{ height: 50, width: 50, marginRight: 24 }}\r\n        />\r\n        {parseEmoji(commit.message)}\r\n      </Accordion.Toggle>\r\n      <Accordion.Collapse eventKey={index.toString()}>\r\n        <Card.Body>\r\n          <div>\r\n            <p>Date: {commit.committer.date}</p>\r\n            <p>\r\n              Author: <a href={author.html_url}>{author.login}</a>{' '}\r\n            </p>\r\n          </div>\r\n          <p>Email: {commit.committer.email}</p>\r\n          <p>\r\n            <a href={html_url}>I want to see the changes!</a>\r\n          </p>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  );\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport { repoUrl } from '../constants';\r\nimport { useRequest } from '../hooks/use-request';\r\nimport { Commit } from './commit';\r\n\r\nexport const CommitList: React.FC = () => {\r\n  const { doRequest, commits, error, loading } = useRequest({\r\n    url: repoUrl,\r\n    method: 'GET',\r\n  });\r\n\r\n  console.log(commits);\r\n\r\n  const fetchCommits = useCallback(() => {\r\n    doRequest();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchCommits();\r\n  }, []);\r\n\r\n  const commitList = commits.map((commitData, index) => {\r\n    return (\r\n      <Commit\r\n        key={commitData.commit.message}\r\n        commitData={commitData}\r\n        index={index}\r\n      />\r\n    );\r\n  });\r\n\r\n  const handleClick = () => {\r\n    fetchCommits();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      <Button\r\n        variant=\"dark\"\r\n        onClick={handleClick}\r\n        disabled={loading}\r\n        data-testid=\"getCommitsButton\"\r\n        style={{ marginBottom: 24 }}\r\n      >\r\n        {loading ? 'Loading...' : 'Get commits'}\r\n      </Button>\r\n      <Accordion style={{ marginBottom: 24 }}>\r\n        {loading ? <Skeleton count={20} /> : commitList}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { CommitData } from '../models/commitData';\r\nimport commitService from '../services/commits';\r\n\r\ninterface Props {\r\n  url: string;\r\n  method: 'GET' | 'POST' | 'PATCH' | 'PUT';\r\n  body?: any; // In case it is needed for the request\r\n  onSuccess?: (commits: CommitData[]) => void; //In case we need to do something else, e.g: Move to a different route\r\n}\r\n\r\nexport const useRequest = ({ method, url, body, onSuccess }: Props) => {\r\n  const [error, setError] = useState<{ message: string } | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [commits, setCommits] = useState<CommitData[]>([]);\r\n\r\n  const doRequest = async () => {\r\n    try {\r\n      setError(null);\r\n      setCommits([]);\r\n      setLoading(true);\r\n      const response = await commitService.getCommits(url);\r\n      setCommits(commits.concat(response));\r\n      setLoading(false);\r\n      if (onSuccess) {\r\n        onSuccess(commits);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n      console.error(error.message);\r\n    }\r\n  };\r\n  return { doRequest, error, commits, loading } as const;\r\n};\r\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\nimport Container from 'react-bootstrap/Container';\nimport { CommitList } from './components/commit-list';\n\nexport const App: React.FC = () => {\n  return (\n    <Container>\n      <Jumbotron>\n        <h1 className=\"header\">Github Commit History</h1>\n      </Jumbotron>\n      <CommitList />\n    </Container>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}